[project]
authors = [
  {name = "AIOSonos", email = "m.vanderveldt@users.noreply.github.com"},
]
classifiers = [
  "Environment :: Console",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
]
dependencies = ["aiohttp>=3.8.4", "orjson>=3.8.9"]
description = "Async python library to communicate with Sonos devices."
license = {text = "Apache-2.0"}
name = "aiosonos"
readme = "README.md"
requires-python = ">=3.11"
version = "0.0.0"

[project.optional-dependencies]
speedups = [
  "faust-cchardet>=2.1.18",
  "aiodns>=3.0.0",
  "Brotli>=1.0.9",
]

test = [
  "codespell==2.4.1",
  "mypy==1.14.1",
  "pre-commit==4.1.0",
  "pre-commit-hooks==5.0.0",
  "pytest==8.3.4",
  "pytest-aiohttp==1.1.0",
  "pytest-cov==6.0.0",
  "ruff==0.9.7",
]

[tool.setuptools]
include-package-data = true
packages = ["aiosonos"]
platforms = ["any"]
zip-safe = false

[tool.setuptools.package-data]
aiosonos = ["py.typed"]

[tool.ruff]
fix = true
show-fixes = true

line-length = 100
target-version = "py311"

[tool.ruff.lint.pydocstyle]
# Use Google-style docstrings.
convention = "pep257"

[tool.ruff.lint.pylint]

max-args = 20
max-branches = 25
max-returns = 15
max-statements = 50

[tool.mypy]
platform = "linux"
python_version = "3.11"

# show error messages from unrelated files
follow_imports = "normal"

# suppress errors about unsatisfied imports
ignore_missing_imports = true

# be strict
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
no_implicit_optional = true
no_implicit_reexport = true
strict_optional = true
warn_incomplete_stub = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.pylint.MASTER]
extension-pkg-whitelist = ["orjson"]
ignore = ["tests"]

[tool.pylint.BASIC]
good-names = ["_", "id", "on", "Run", "T"]

[tool.pylint.DESIGN]
max-attributes = 8

[tool.pylint."MESSAGES CONTROL"]
disable = [
  "duplicate-code",
  "format",
  "unsubscriptable-object",
  "unused-argument", # handled by ruff
  "unspecified-encoding", # handled by ruff
  "isinstance-second-argument-not-valid-type", # conflict with ruff
  "fixme", # we're still developing
]

[tool.pylint.SIMILARITIES]
ignore-imports = true

[tool.pylint.FORMAT]
max-line-length = 100

[tool.pytest.ini_options]
addopts = "--cov"
asyncio_mode = "auto"

[tool.ruff.lint]
ignore = [
  "ANN002", # Just annoying, not really useful
  "ANN003", # Just annoying, not really useful
  "ANN101", # Self... explanatory
  "ANN401", # Opinioated warning on disallowing dynamically typed expressions
  "D203", # Conflicts with other rules
  "D213", # Conflicts with other rules
  "D417", # False positives in some occasions
  "EM101", # Just annoying, not really useful
  "FIX002", # Just annoying, not really useful
  "PLR2004", # Just annoying, not really useful
  "PD011", # Just annoying, not really useful
  "S101", # assert is often used to satisfy type checking
  "TD002", # Just annoying, not really useful
  "TD003", # Just annoying, not really useful
  "TD004", # Just annoying, not really useful
  "TRY003", # Just annoying, not really useful
  "COM812", # Conflicts with the Ruff formatter
  "ISC001", # Conflicts with the Ruff formatter
]

select = ["ALL"]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.lint.isort]
known-first-party = ["aiosonos"]

[tool.ruff.lint.mccabe]
max-complexity = 25
